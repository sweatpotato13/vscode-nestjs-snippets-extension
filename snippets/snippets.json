{
    "Nest Root Module": {
        "prefix": "nest-root-module",
        "description": "NestJS Root Module",
        "body": [
            "import { Module } from '@nestjs/common';",
            "",
            "@Module({",
            "\tmodules: [${1}Module],",
            "})",
            "export class AppModule { };"
        ]
    },
    "Nest NestModule": {
        "prefix": "nest-module",
        "description": "NestJS NestModule",
        "body": [
            "import { Module } from '@nestjs/common';",
            "",
            "@Module({",
            "\tproviders: [",
            "\t\t { provide: '${1}Service', useClass: ${1}Service },",
            "],",
            "\tcontrollers: [${1}Controller],",
            "})",
            "export class ${1}Module { }"
        ]
    },
    "Nest Controller": {
        "prefix": "nest-controller",
        "description": "NestJS Controller",
        "body": [
            "import { Controller, Get, Inject, HttpCode, HttpStatus } from '@nestjs/common';",
            "",
            "@Controller('${1}')",
            "export class ${1}Controller {",
            "\tconstructor(@Inject('${1}Service') private readonly service: ${1}Service){ }",
            "",
            "\t@Get()",
            "\t@HttpCode(HttpStatus.OK)",
            "\tasync healthCheck(): Promise<any> {",
            "\t\ttry {",
            "\t\t\tconst result = await this.service.healthCheck();",
            "\t\t\treturn result;",
            "\t\t} catch (error) {",
            "\t\t\tthrow error;",
            "\t\t}",
            "\t}",
            "}"
        ]
    },
    "Nest Service": {
        "prefix": "nest-service",
        "description": "NestJS Service",
        "body": [
            "import { Injectable } from '@nestjs/common';",
            "",
            "@Injectable()",
            "export class ${1}Service {",
            "\tconstructor() { }",
            "",
            "\tpublic async healthCheck(): Promise<any> {",
            "\t\ttry {",
            "\t\t\treturn 'Hello :)';",
            "\t\t}",
            "\t\tcatch (error: any) {",
            "\t\t\tthrow error",
            "\t\t}",
            "\t}",
            "}"
        ]
    },
    "Nest CQRS Service": {
        "prefix": "nest-cqrs-service",
        "description": "NestJS CQRS Service",
        "body": [
            "import { Injectable } from '@nestjs/common';",
            "import { CommandBus, QueryBus } from '@nestjs/cqrs';",
            "",
            "@Injectable()",
            "export class ${1}Service {",
            "\tconstructor(",
            "\t\tprivate readonly commandBus: CommandBus,",
            "\t\tprivate readonly queryBus: QueryBus",
            "\t) { }",
            "",
            "\tpublic async healthCheck(): Promise<any> {",
            "\t\ttry {",
            "\t\t\tconst result = await this.queryBus.execute(new HealthCheckQuery());",
            "\t\t\treturn result}",
            "\t\tcatch (error: any) {",
            "\t\t\tthrow error",
            "\t\t}",
            "\t}",
            "",
            "\tpublic async healthCheckCommand(): Promise<any> {",
            "\t\ttry {",
            "\t\t\tconst result = await this.commandBus.execute(new HealthCheckCommand());",
            "\t\t\treturn result}",
            "\t\tcatch (error: any) {",
            "\t\t\tthrow error",
            "\t\t}",
            "\t}",
            "}"
        ]
    },
    "Nest CQRS Query Service Function": {
        "prefix": "nest-cqrs-query-service-function",
        "description": "NestJS CQRS Service Function with Querybus",
        "body": [
            "public async function(args: any): Promise<any> {",
            "\ttry {",
            "\t\tconst result = await this.queryBus.execute(new FunctionQuery());",
            "\t\treturn result;",
            "\t}",
            "\tcatch (error: any) {",
            "\t\tthrow error",
            "\t}",
            "}"
        ]
    },
    "Nest CQRS Transactional Service Function": {
        "prefix": "nest-cqrs-trx-service-function",
        "description": "NestJS CQRS Service Function with Transactional decorator",
        "body": [
            "@Transactional()",
            "public async function(args: any): Promise<any> {",
            "\ttry {",
            "\t\tconst result = await this.commandBus.execute(new FunctionCommand());",
            "\t\trunOnTransactionCommit(() => {});",
            "\t\treturn result;",
            "\t}",
            "\tcatch (error: any) {",
            "\t\trunOnTransactionRollback(() => {});",
            "\t\tthrow error",
            "\t}",
            "\tfinally{",
            "\t\trunOnTransactionComplete(() => {});",
            "\t}",
            "}"
        ]
    },
    "Nest Dto": {
        "prefix": "nest-dto",
        "description": "NestJS Dto",
        "body": [
            "import { IsString } from 'class-validator';",
            "",
            "export class ${1}Dto {",
            "\t@IsString({ message:'Invalid result' })",
            "\treadonly result: string;",
            "",
            "\tpublic static of(",
            "\t\tparams: Partial<${1}Dto>",
            "\t): ${1}Dto {",
            "\t\tconst dto = new ${1}Dto();",
            "\t\tObject.assign(dto, params);",
            "\t\treturn dto;",
            "\t}",
            "}"
        ]
    },
    "Nest CQRS Query": {
        "prefix": "nest-cqrs-query",
        "description": "NestJS CQRS Query",
        "body": [
            "import { IQuery } from '@nestjs/cqrs';",
            "",
            "export class ${1}Query implements IQuery {",
            "\tconstructor(public readonly args: any) {}",
            "}"
        ]
    },
    "Nest CQRS Query Handler": {
        "prefix": "nest-cqrs-query-handler",
        "description": "NestJS CQRS Query Handler",
        "body": [
            "import { QueryHandler, IQueryHandler } from '@nestjs/cqrs';",
            "import { ${1}Query } from '../impl';",
            "",
            "@QueryHandler(${1}Query)",
            "export class ${1}Handler implements IQueryHandler<${1}Query> {",
            "\tconstructor() {}",
            "",
            "\tasync execute(query: ${1}Query) {",
            "\t\ttry{",
            "\t\t\treturn 'Hello :)';",
            "\t\t} catch(error:any) {",
            "\t\t\tthrow error;",
            "\t\t}",
            "\t}",
            "}"
        ]
    },
    "Nest CQRS Command": {
        "prefix": "nest-cqrs-command",
        "description": "NestJS CQRS Command",
        "body": [
            "import { ICommand } from '@nestjs/cqrs';",
            "",
            "export class ${1}Command implements ICommand {",
            "\tconstructor(public readonly args: any) {}",
            "}"
        ]
    },
    "Nest CQRS Command Handler": {
        "prefix": "nest-cqrs-command-handler",
        "description": "NestJS CQRS Command Handler",
        "body": [
            "import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';",
            "import { ${1}Command } from '../impl';",
            "",
            "@CommandHandler(${1}Command)",
            "export class ${1}Handler implements ICommandHandler<${1}Command> {",
            "\tconstructor() {}",
            "",
            "\tasync execute(command: ${1}Command) {",
            "\t\ttry{",
            "\t\t\treturn 'Hello :)';",
            "\t\t} catch(error:any) {",
            "\t\t\tthrow error;",
            "\t\t}",
            "\t}",
            "}"
        ]
    },
    "Nest TypeORM Entity": {
        "prefix": "nest-entity",
        "description": "NestJS TypeORM Entity",
        "body": [
            "import { plainToClass } from 'class-transformer';",
            "import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';",
            "",
            "@Entity('entity_name', { schema: 'public' })",
            "export class ${1} {",
            "",
            "\t@PrimaryGeneratedColumn({ type: 'integer', name: 'id' })",
            "\tid: number;",
            "",
            "\t@Column('text', { name: 'name' })",
            "\tname: string;",
            "",
            "\ttoDto() {",
            "\t\t return plainToClass(${1}Dto, this);",
            "\t}",
            "",
            "\tpublic static of(params: Partial<${1}>): ${1} {",
            "\t\tconst entity = new ${1}();",
            "\t\tObject.assign(entity, params);",
            "\t\treturn entity;",
            "\t}",
            "}"
        ]
    },
    "Nest TypeORM Entity Dto": {
        "prefix": "nest-entity-dto",
        "description": "NestJS TypeORM Entity Dto",
        "body": [
            "import { Exclude, Expose } from 'class-transformer';",
            "import { IsString } from 'class-validator';",
            "",
            "@Exclude()",
            "export class ${1}Dto {",
            "",
            "\t@Expose()",
            "\t@IsString({ message: 'Invalid name' })",
            "\treadonly name: string;",
            "",
            "\tpublic static of(params: Partial<${1}Dto>): ${1}Dto {",
            "\t\tconst dto = new ${1}Dto();",
            "\t\tObject.assign(dto, params);",
            "\t\treturn dto;",
            "\t}",
            "}"
        ]
    },
    "Nest Unit Test": {
        "prefix": "nest-test",
        "description": "NestJS Unit Test",
        "body": [
            "import { Test } from '@nestjs/testing';",
            "import { ${1}Controller } from './.controller';",
            "import { ${1}Service } from './.service';",
            "",
            "describe('${1}Controller', () => {",
            "\tlet Controller: ${1}Controller;",
            "\tlet Service: ${1}Service;",
            "",
            "\tbeforeEach(async () => {",
            "\t\tconst module = await Test.createTestingModule({",
            "\t\t\tcontrollers: [${1}Controller],",
            "\t\t\tproviders: [${1}Service],",
            "\t\t}).compile();",
            "",
            "\t\tService = module.get<${1}Service>(${1}Service);",
            "\t\tController = module.get<${1}Controller>(${1}Controller);",
            "\t});",
            "",
            "\tdescribe('findAll', () => {",
            "\t\tit('should return an array of users', async () => {",
            "\t\t\tconst result = ['test'];",
            "\t\t\tjest.spyOn(Service, 'findAll').mockImplementation(() => result);",
            "\t\t\t${0}",
            "\t\t\texpect(await Controller.findAll()).toBe(result);",
            "\t\t});",
            "\t});",
            "});"
        ]
    },
    "Nest Service Unit Test": {
        "prefix": "nest-test-service",
        "description": "NestJS Service Unit Test",
        "body": [
            "import { Test } from '@nestjs/testing';",
            "import { ${1}Service } from './.service';",
            "",
            "describe('${1} Test suite', () => {",
            "\tlet Service: ${1}Service;",
            "",
            "\tbeforeEach(async () => {",
            "\t\tconst module = await Test.createTestingModule({",
            "\t\t\tproviders: [${1}Service],",
            "\t\t}).compile();",
            "",
            "\t\tService = module.get<${1}Service>(${1}Service);",
            "\t});",
            "",
            "\tit('should be defined', () => {",
            "\t\texpect(Service).toBeDefined();",
            "\t});",
            "});"
        ]
    }
}